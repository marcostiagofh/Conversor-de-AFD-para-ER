{ "af": [ ["1", "2", "3"], ["a", "b", "c", "d"], [ ["1", "a", "1"], ["1", "#", "2"], ["2", "b", "2"], ["2", "#", "3"], ["3", "c", "3"], ["3", "a", "2"], ["3", "d", "2"] ], ["1", "3"], ["2"] ], "r": ["1", "3", "2"] }

0 - Gramática construída
<procStart> ::= '{' '"' <procChar> <procChar> '"' ':' '[' <procEstados> ',' <procAlfabeto> ',' <procTransicoes> ',' <procIniciais> ',' <procFinais> ']' ',' '"' <procChar> '"' ':' <procR> '}' 
<procEstados> ::= '[' <procNome> { ',' <procNome> } ']' 
<procAlfabeto> ::= '[' <procNome> { ',' <procNome> } ']' 
<procTransicoes> ::= '[' '[' <procNome> ',' <procNome> ',' <procNome> ']' { ',' '[' <procNome> ',' <procNome> ',' <procNome> ']' } ']'
<procIniciais> ::= '[' <procNome> { ',' <procNome> } ']' 
<procFinais> ::= '[' <procNome> { ',' <procNome> } ']'
<procR> ::= '[' <procNome> { ',' <procNome> } ']' 
<procNome> ::= '"' <procChar> '"'
<procChar> :: = 'nome' (retorna um único caractere char)

1 - Analisador léxico criado para a gramática acima:

simbolos lexicos (SymbolTable.java)
{
}
[
]
,
:
"

transições de estados no analisador léxico (LexicalAnalysis.java)
modelo:
estado_inicial -> estado_final: simbolos de transição
1 -> 1: whitespace, \n, \r, \t
1 -> 3: character, digit, '#', {, }, [, ], ',', ':', '"'

2 - Gerar AFNLambda 'm' e R 'r' segundo as classes AFN e R, ao receber os dados do arquivo de especificacao .afn

class AFN{
	estados: List<Simbolo>
	alfabeto: List<Simbolo>
	transicoes: List<Transicao>
	iniciais: List<Simbolo>
	finais: List<Simbolo>		
}

class Transicao{
	//transicao de e1 para e2 sob 's'
	e1: Simbolo
	s: Simbolo
	e2: Simbolo
}

class Simbolo{
	ch: char
}

class R{
	rs: List<Simbolo>
}

3 - Gerar novo AFNLambda 'm1' a partir de 'm', de acordo com as instruções no arquivo .pdf
adicione os estados i e f em 'm1', alem dos estados ja presentes em 'm'
em 'm1', adicione transicao de i para s sobre '#' pra todos os iniciais s em 'm'
em 'm1', adicione transicao de s para f sobre '#' pra todos os finais s em 'm'
adicione em 'm1' as transicoes, alfabeto ja presentes em 'm'
em 'm1' i sera o inicial e f sera o final

4 - Gerar diagrama ER segundo a classe Diagrama_ER, ao receber AFN 'm1' e R 'r' e fazer as modificações necessárias

class Diagrama_ER{
	estados: List<Simbolo>
	transicoes: List<Transicao_ER>
}

class Transicao_ER{
	e1: Simbolo
	s: String
	e2: Simbolo
}

5 - Dentro do Diagrama ER, crie um estado para cada estado do AFN recebido como parametro e adicione todas as transicoes do AFN para o Diagrama ER. Se na hora de adicionar uma transicao (e1,s2,e2) do AFN ao diagrama ER, for percebido que ja existe uma transicao no Diagrama ER (e1,s1,e2), apenas faça uma conjunção dos simbolos de transicao. (e1, s1 + s2, e2).

6 - Remover os estados do Diagrama ER na ordem em que aparecem em R. Para isso iremos utilizar o seguinte algoritmo:

>>Entrada: Diagrama_ER diagrama_er
>>Variáveis:
	list<simbolo> estados_a_serem_removidos
	list<simbolo> estados_com_transicoes_que_atingem_r
	list<simbolo> transicoes_que_entram_em_r
	list<simbolo> transicoes_de_loop_em_r
	list<simbolo> transicoes_que_saem_de_r
	list<simbolo> estados_atingidos_por_transicoes_que_saem_de_r
>>Saída: String expressão_regular
>>Passos:
	s1 = simbolo de transição de 'e1' para 'r' no AFN 
	s2 = simbolo de transição de 'r' para 'r' no AFN
	s3 = simbolo de transição de 'r' para 'e2' no AFN
	s = expressao regular, se existir, da transicao de e1 para e2 no diagrama ER

	para cada simbolo 'r' em estados_a_serem_removidos
		para cada simbolo 'e1' em estados_com_transicoes_que_atingem_r
			para cada simbolo 'e2' em estados_atingidos_por_transicoes_que_saem_de_r
				se 's' existe
					s = s + s1(s2)*s3
				se não existe,
					s = s1(s2)*s3
			remover transição de 'e1' para 'r' do diagrama_ER	
		remover estado 'r' do diagrama_ER
